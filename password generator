#include <bits/stdc++.h>
// For isdigit and isalpha functions
using namespace std;
// constant of alphanumeric characters and symbols
const char alphanum[] = "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
// Length of the alphanum array
int str_length = sizeof(alphanum) - 1; 
// Function to check the complexity of the password
string passwordComplex(const string& password) {
    if (password.length() < 8) 
        return "Simple";
    else if (password.find_first_of("!@#$%^&*_") != string::npos) 
        return "Hard";
    else 
        return "Medium";
    }
int main() {
    // Variables to store user input for password length
    int mn = 0;
    int mx = 0;
    // to enter the minimum and maximum length of the password
    cout << "Minimum length of password: ";
    cin >> mn;
    cout << "Maximum length of password: ";
    cin >> mx;
    // the random number generator with current time
    srand(time(0));
    // Calculate a random password length within the specified range
    int length = mn + rand() % (mx - mn + 1);
    // Output the generated password
    cout << "Password: ";
    // Generate password
    string password;
    for (int i = 0; i < length; i++) {
    // Append a random character from the alphanum array to the password string
        password += alphanum[rand() % str_length];
    }
    cout << password << endl;
    // Determine the complexity of the password
    string complexity = passwordComplex(password);
    cout << "Password Complexity: " << complexity << endl;
}
